{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState, useEffect } from 'react';\n\nfunction useStickyState(defaultValue, key) {\n  var _useState = useState(function () {\n    var stickyValue = window.localStorage.getItem(key);\n    return stickyValue !== null ? JSON.parse(stickyValue) : defaultValue;\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  useEffect(function () {\n    window.localStorage.setItem(key, JSON.stringify(value));\n  }, [key, value]);\n  return [value, setValue];\n}\n\nexport default useStickyState;","map":{"version":3,"sources":["/Users/klliu/Desktop/WalthamForum/client/useStickyState.js"],"names":["useState","useEffect","useStickyState","defaultValue","key","stickyValue","window","localStorage","getItem","JSON","parse","value","setValue","setItem","stringify"],"mappings":";AAAA,SAASA,QAAT,EAAkBC,SAAlB,QAAkC,OAAlC;;AAEA,SAASC,cAAT,CAAwBC,YAAxB,EAAsCC,GAAtC,EAA2C;AAAA,kBAKfJ,QAAQ,CAAC,YAAM;AAIvC,QAAMK,WAAW,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BJ,GAA5B,CAApB;AACA,WAAOC,WAAW,KAAK,IAAhB,GACHI,IAAI,CAACC,KAAL,CAAWL,WAAX,CADG,GAEHF,YAFJ;AAGD,GARiC,CALO;AAAA;AAAA,MAKlCQ,KALkC;AAAA,MAK3BC,QAL2B;;AAiBzCX,EAAAA,SAAS,CAAC,YAAM;AACdK,IAAAA,MAAM,CAACC,YAAP,CAAoBM,OAApB,CAA4BT,GAA5B,EAAiCK,IAAI,CAACK,SAAL,CAAeH,KAAf,CAAjC;AACD,GAFQ,EAEN,CAACP,GAAD,EAAMO,KAAN,CAFM,CAAT;AAIA,SAAO,CAACA,KAAD,EAAQC,QAAR,CAAP;AACD;;AAED,eAAeV,cAAf","sourcesContent":["import  {useState,useEffect} from 'react';\n\nfunction useStickyState(defaultValue, key) {\n\n  // we initialize the state with the value in local storage\n  // under that key, if there is something there; otherwise,\n  // we use the default value.\n  const [value, setValue] = useState(() => {\n    // we pass in a function to useState which will generate\n    // the initial state value and will be called only for\n    // the first time the component is rendered!\n    const stickyValue = window.localStorage.getItem(key);\n    return stickyValue !== null\n      ? JSON.parse(stickyValue)\n      : defaultValue;\n  });\n\n  // if key or value change, then after the componenent is rendered\n  // the key/value pair will be stored in localstorage ..\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(value));\n  }, [key, value]);\n\n  return [value, setValue];\n}\n\nexport default useStickyState;\n"]},"metadata":{},"sourceType":"module"}